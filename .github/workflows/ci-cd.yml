name: CI/CD Pipeline

on: # Trigger the workflow on push events to the main branch
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Runs on the latest version of Ubuntu | Default operating system environment for workflows unless explicitly specified.

    steps:
      - name: Checkout code  # Step to checkout the code from the repository | Fetch the source code repository into the runner machine where our workflow is executing. 
        uses: actions/checkout@v4

      - name: Set up Node.js # Step to set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm' # Cache npm dependencies for faster builds

      - name: Install Dependencies # Step to install npm dependencies
        run: npm ci

      - name: Build the React app  # Step to build the React app
        run: npm run build

      - name: build and push the docker image to dockerhub
        run: |
          # 1. Login to DockerHub
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}} 
          # 2. Build the Docker image
          docker build -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE_NAME}}:${{secrets.IMAGE_TAG_NAME}} .  
          # 3. Push the Docker image to DockerHub
          docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE_NAME}}:${{secrets.IMAGE_TAG_NAME}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
                
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
    
      # Instead of ECR we can also push the image to Dockhub and pull it to ECS.
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
      # Updating our ECS task definition file with the newly built Docker image ID 
      # after successfully building and pushing the Docker image to Amazon ECR. 
      - name: Update ECS task definition with new image 
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
    
      - name: Deploy the updated ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
